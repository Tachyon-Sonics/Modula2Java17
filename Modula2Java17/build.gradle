apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

dependencies {
	// Dependency on another Eclipse project (assuming it's a local project)
    implementation project(':Modula2-Runtime')

    implementation("org.antlr:antlr4:4.12.0")
    implementation("org.antlr:antlr4-maven-plugin:4.12.0")
}

sourceSets {
	main.java.srcDirs = ['src']
	main.resources.srcDirs = ['src']
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

eclipse {
    pathVariables 'GRADLE_USER_HOME' : gradle.gradleUserHomeDir
}

task executableJar(type: Jar) {
    manifest {
        attributes (
        	'Main-Class': 'ch.pitchtech.modula.converter.Modula2JavaTranslator',
        	'Class-Path': 'Modula2-Runtime.jar'
        )
    }
    archiveBaseName = 'Modula2Java17'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
    	configurations.runtimeClasspath.collect {
    		if (!it.name.equalsIgnoreCase("Modula2-Runtime.jar")) {
	    		it.isDirectory() ? it : zipTree(it)
	    	}
		}
	}
    with jar
}

task release(type: Zip){
    archiveFileName = "Modula2Java17-0.9.zip"
    destinationDirectory = file('build/')
    from (files(
    	'./build/libs',
    	'../Modula2-Runtime/build/libs',
    	'../Modula2-Library/build/libs'
	))
	dependsOn executableJar
    dependsOn ':Modula2-Runtime:jar'
    dependsOn ':Modula2-Runtime:sourcesJar'
    dependsOn ':Modula2-Library:jar'
    dependsOn ':Modula2-Library:sourcesJar'
    into('Modula2Java17')
}

task regenerateGrammar(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'ch.pitchtech.modula.converter.antlr.BuildJavaCodeFromGrammar'
}
